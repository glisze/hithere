0.0-dirty
2018.07.27 3:11 Friday

Straight into the release procedures. This is what this is about.
Please release this. Now. What is there to this! First, (01) make
the ChangeLog file, straight from the git log. Then, (02) commit,
and make the base tag. (03) bootstrap, (04) configure, (05) any
NEWS? Yes, this is it, right here, withing. (06) make distcheck;
uncommitted; there is more.

(07) make the tar as found out earlier, (08) make the guix.scm
(09) upload. Commit, merge into the master. (10) tag, (11) make
distcheck. Hmm. Is that really the efficient way to do this. Is
it even effective. Does it do? How!

v-200

The Guix package now builds and installs, given that proper
procedures are followed. This includes making the dist or distcheck targets, updating this, here, NEWS item,
setting the conforming release tag, and producing a guix.scm
with correct version, and sha256 identifiers.

The project administration follows a model that was earlier
explored elsewhere. In summary, make the 'deveop' branch have all the features that are ready to be
release; and have a 'release/v0.0', in this case branch to do
the release administration: create the tag, make the distchech, assign
the correct version and sha256, upload, and test the installation.
Once this is done the release branch is mereged into the master, and
checked again. These checks, here, now, serve the purpose of val-
idating these administrative processes.

Hi, there!


=================================================================

For our convenience, here are some old news from other times. It is noted that the release numbers have been rewound. Also, this is a
developing process itself. Release v0.1 is envisaged to have a stable administrative policy in place. From v0.1 the release cycles will
follow, not develop policies.

=====================================================================

and here it comes, the old news, at last:

./bootstrap; ./configure; make distcheck

tar -I "gzip -9n"
    --format=gnu
    --sort=name
    --mtime=@1
    --owner=root:0
    --group=root:0
    --check-links
    -cvf hithere-0.0.7.tar.gz
    ./hithere-0.0.7/ 

sed guix.scm -e '/@sha256@/s,,'"$( guix hash hithere-0.0.7.tar.gz )"',' -i

guix build -f guix.scm

v0.0.6-rc0

2018.07.23 16:10 Monday.

This has passed the test of 'make dist' within a separate build directory.
The aim is now, again, to exercise the release process, and then test the
guix (build|package|environemt|) -l guix.scm --with-source=hithere=./
installation/build procedures. RFC: does this work.

First the development and release policy.
Make on feature in its own feature branch. In this case the branch is named
'feature/0002/guix-things'. The branch name reifies the notions of: branch
type, locally unique serial number, descriptive identifier. RFC: is that
reasonably pragmatic. For example 'git checkout $( git branch | grep 0002 )'
is one example command line that benefits from the uniqueness of the branch
name's embedded serial number. This unique feature appears to me to be
reasonable visible and memorable within working memory's life cycle.

Of course, 'hithere' does nothing but say its greeting. The essence is the
administrative-, development-, and operating system surrounding of it.

v0.0.5

This is the brand new thing, for today. It now uses git-version-gen.
Is this any good?




